#!/usr/bin/env bash
set -euo pipefail

EMERGE_OPTS=(
	--complete-graph
	--keep-going
	--oneshot
	--tree
	--verbose
)

EMERGE_UPDATE_OPTS=(
	--update
	--changed-use
)

ONLY_WORLD=false
DEBUG=false
PRETEND=false
SYNC=false
BE_ULTRA_NICE=false
JOBS=""
LOAD_PERCENTAGE=""
DEPCLEAN=true
EMERGE_ONCE=true

do_exit() {
	exit 1
}

command-exists() {
	if command -v $@ &> /dev/null; then
		return 0
	fi
	return 1
}

trap do_exit SIGINT

while getopts "cdj:l:no:psw" OPTION; do
    case $OPTION in
	c)
		DEPCLEAN=false
		;;
	d)
	    DEBUG=true
	    ;;
	j)
		JOBS=${OPTARG}
		;;
	l)
		LOAD_PERCENTAGE="${OPTARG}"
		# TODO: Ensure that LOAD_PERCENTAGE is a non-negative float.
		;;
	n)
		BE_ULTRA_NICE=true
		;;
	o)
		EMERGE_ONCE=${OPTARG}
		# TODO: Check if OPTARG is true/false.
		;;
	p)
	    PRETEND=true
	    ;;
	s)
		SYNC=true
		;;
	w)
	    ONLY_WORLD=true
	    ;;
	*)
		echo "Invalid option: ${OPTION}"
		exit 1
    esac
done

if $DEBUG; then
	set -x
fi

WAIT_NETWORK_SECS=180
PING_HOST=gentoo.org
for I in $(seq 1 ${WAIT_NETWORK_SECS}); do
	if [[ ${I} -eq ${WAIT_NETWORK_SECS} ]]; then
		# Last ping without stderr redirection.
		if ping -c 1 ${PING_HOST} > /dev/null; then
			break
		else
			>&2 echo "Network not online after ${WAIT_NETWORK_SECS} seconds"
			exit 2
		fi
	fi
	if ping -c 1 ${PING_HOST} &> /dev/null; then
		# Network is available and online.
		break
	fi
	echo "Waiting for network… (${I})"
	sleep 1
done

# Disable iwdevtools, if installed, for update-system runs.
export IWDT_ALL=n

CORES=$(nproc)

if $BE_ULTRA_NICE || [[ -n "${LOAD_PERCENTAGE}" ]]; then
	if [[ -z "${LOAD_PERCENTAGE}" ]]; then
		LOAD_PERCENTAGE="0.85"
	fi

	MAKE_LOAD=$(echo "${CORES} * ${LOAD_PERCENTAGE}" | bc)

	if [[ "${MAKE_LOAD%.*}" -lt 1 ]]; then
		MAKE_LOAD="2"
		MAKE_JOBS="1"
	else
		MAKE_JOBS="${MAKE_LOAD%.*}"
	fi

	export MAKEOPTS="--jobs=${MAKE_JOBS} --load-average=${MAKE_LOAD}"
fi

if [[ -z ${JOBS} ]]; then
	JOBS=$((CORES / 4))
fi

EMERGE_OPTS+=("--jobs=${JOBS}")

printUpgradeablePackages() {
		cat <<EOF
The following ${1} packages where found:
--------------------------------------------
$(printf '%s\n' "${UPGRADEABLE_PACKAGES[@]}")
--------------------------------------------
Attempting to update those packages
EOF
}

run() {
	runCommand=()
	if $BE_ULTRA_NICE; then
		runCommand+=("chrt --idle 0 ionice -c idle")
	fi

	# shellcheck disable=SC2068
	runCommand+=(${@})

	set +e
	# shellcheck disable=SC2068
	${runCommand[@]}
	set -e
	return $?
}

if $SYNC; then
	run emerge --sync
fi

determineObsoletePackages() {
	local obsolete_packages
	obsolete_packages=$(TEST_FOR_REDUNDANCY=false \
						TEST_FOR_NONEXISTENT=true \
										   eix \
										   --test-obsolete \
										   --only-names \
										   || true)

	for obsolete_package in ${obsolete_packages}; do
		# shellcheck disable=SC2091
		if $(FORMAT='{upgrade}true{else}false{}' eix --exact --pure-packages "${obsolete_package}"); then
			# TODO: Take slots into account. If the currently
			# installed slot is upgradeable, then use this
			# slot. Otherwhise use the newest stable stlot.
			UPGRADEABLE_PACKAGES+=("${obsolete_package}")
		else
			NON_UPGRADEABLE_PACKAGES+=("${obsolete_package}")
		fi
	done
}

initPackagesArrays() {
	UPGRADEABLE_PACKAGES=()
	NON_UPGRADEABLE_PACKAGES=()
}

initPackagesArrays

# First try update all packages that become obsolete since this also
# means that some other packages will possibly be updated because of
# rebuilds, which may also include packages that would have been
# updated at a later stage anyways. We therefore prevent emerging the
# same package twice.
if ! $ONLY_WORLD; then
	echo "Searching for obsolete packages"
	determineObsoletePackages

	if [[ ${#UPGRADEABLE_PACKAGES[@]} -eq 0 ]] ; then
		echo "No obsolete packages packages found"
	elif ! ${EMERGE_ONCE}; then
		printUpgradeablePackages obsolete
		echo "Packages that became obsolete found."
		echo "Running emerge…"
		if $PRETEND; then
			run emerge ${EMERGE_OPTS[@]} -p ${UPGRADEABLE_PACKAGES[@]} || exit 1
		else
			run emerge ${EMERGE_OPTS[@]} ${EMERGE_UPDATE_OPTS[@]} ${UPGRADEABLE_PACKAGES[@]}

			if [[ ${?} -ne 0 ]]; then
				echo "Still found some more obsolete packages."
				echo "Switching to single emerge mode…"

				determineObsoletePackages
				printUpgradeablePackages obsolete

				for p in ${UPGRADEABLE_PACKAGES[@]} ; do
					echo "Now trying to update $p"
					eix -I -e $p
					run emerge ${EMERGE_OPTS[@]} ${EMERGE_UPDATE_OPTS[@]} $p
				done
			fi
		fi

		initPackagesArrays
	fi
fi

# Then proceed with all world packages that have no fetch restrictions
# but updates
WORLD_PACKAGES=$(eix \
			   -I -u \
			   --world-file \
			   --only-names \
			   --not -\( --restrict-fetch -\) \
			   || true)

for WORLD_PACKAGE in ${WORLD_PACKAGES}; do
	# shellcheck disable=SC2091
	if $(FORMAT='{upgrade}true{else}false{}' eix --exact --pure-packages "${WORLD_PACKAGE}"); then
		# TODO: Take slots into account. If the currently
		# installed slot is upgradeable, then use this
		# slot. Otherwhise use the newest stable stlot.
		UPGRADEABLE_PACKAGES+=("${WORLD_PACKAGE}")
	else
		NON_UPGRADEABLE_PACKAGES+=("${WORLD_PACKAGE}")
	fi
done

if $EMERGE_ONCE; then
	PACKAGE_KIND="world/obsolete"
else
	PACKAGE_KIND="world"
fi

if [[ ${#UPGRADEABLE_PACKAGES[@]} -eq 0 ]] ; then
    echo "No upgradeable ${PACKAGE_KIND} packages"
else
	printUpgradeablePackages "${PACKAGE_KIND}"
    if ! $PRETEND; then
		run emerge ${EMERGE_OPTS[@]} ${EMERGE_UPDATE_OPTS[@]} ${UPGRADEABLE_PACKAGES[@]} || exit 1
	fi
fi

# Reiterate over UPGRADEABLE_PACKAGES and see if they got updated. Any
# packages that did not get updates are attempted to update again
# without emerge's --update and --changed-use option.
initPackagesArrays
determineObsoletePackages
if [[ ${#UPGRADEABLE_PACKAGES[@]} -ne 0 ]] ; then
	printUpgradeablePackages "oneshot"
	if ! $PRETEND; then
		run emerge ${EMERGE_OPTS[@]} ${UPGRADEABLE_PACKAGES[@]} || exit 1
	fi
fi

# Update all glsa affected packages
echo "glsa-check: Checking for packages with known vulnerabilities"
run glsa-check -f affected || exit 1

$ONLY_WORLD && exit

if command-exists perl-cleaner; then
	run perl-cleaner --all
fi

if command-exists haskell-updater; then
	run haskell-updater -- ${EMERGE_OPTS[@]}
fi

# Note that eix will return an non-zero exit code if no package was
# found, hence we add "|| true".
RESTRICT_FETCH_PACKAGES=$(eix -I -u --world-file --only-names --restrict-fetch || true)
if [[ -n ${RESTRICT_FETCH_PACKAGES} ]]; then
    echo "The following world packages have fetch restrictions"
    echo "Please resovle those"
    emerge -pv ${RESTRICT_FETCH_PACKAGES}
fi

if [[ ${#NON_UPGRADEABLE_PACKAGES[@]} -ne 0 ]]; then
	echo "The following packages need care (e.g. keyword adjustments)"
	for pkg in ${NON_UPGRADEABLE_PACKAGES[@]}; do
		eix $pkg
	done
fi

readonly STATEDIR=/var/lib/update-system
readonly LAST_WORLD_UPDATE_FILE="${STATEDIR}/last-world-update"

declare -ri SECONDS_PER_DAY=86400
declare -ri WORLD_UPDATE_EVERY_DAYS=51

DO_WORLD_UPDATE=false
declare -ri CURRENT_DAY_SINCE_EPOCH=$(( $(date +%s) / SECONDS_PER_DAY ))
if [[ -f "${LAST_WORLD_UPDATE_FILE}" ]]; then
	declare -ri LAST_WORLD_UPDATE=$(<"${LAST_WORLD_UPDATE_FILE}")
	declare -ri NEXT_WORLD_UPDATE=$(( LAST_WORLD_UPDATE + WORLD_UPDATE_EVERY_DAYS ))
	if [[ "${CURRENT_DAY_SINCE_EPOCH}" -gt "${NEXT_WORLD_UPDATE}" ]]; then
		DO_WORLD_UPDATE=true
	fi
else
	DO_WORLD_UPDATE=true
fi

if $DO_WORLD_UPDATE; then
	echo "Performing regular world update (every ${WORLD_UPDATE_EVERY_DAYS} days)"
	run emerge ${EMERGE_OPTS[@]} ${EMERGE_UPDATE_OPTS[@]} --deep @world
	echo "${CURRENT_DAY_SINCE_EPOCH}" > "${LAST_WORLD_UPDATE_FILE}"
fi

if $DEPCLEAN; then
	EXCLUDE_ATOMS=(
		sys-kernel/gentoo-kernel
		sys-kernel/gentoo-kernel-bin
	)

	EXCLUDE_ARG=""
	for EXCLUDE_ATOM in "${EXCLUDE_ATOMS[@]}"; do
		EXCLUDE_ARG+="--exclude ${EXCLUDE_ATOM} "
	done
	
	set +e
	run emerge --depclean \
		${EXCLUDE_ARG}
	set -e

	run emerge --prune "${EXCLUDE_ATOMS[@]}"
fi

run eclean distfiles
run eclean packages

if command-exists eclean-kernel; then
	run eclean-kernel --num 5
fi

maybe_etckeeper_commit() {
	if ! command-exists etckeeper; then
		return
	fi
	if etckeeper unclean; then
		etckeeper commit $@
	fi
}

if command-exists portpeek; then
	maybe_etckeeper_commit "Before portpeek"
	# Portpeek would remove entries from package.env if the package is
	# not installed. However users often want to keep those
	# package.env entries, e.g., for package testing purposes.
	portpeek --no-color --keyword --mask --unmask --fix
	maybe_etckeeper_commit "After portpeek"
fi
